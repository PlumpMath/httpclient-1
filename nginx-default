#
# Ngxinx configuration file for secure websocket applications.
#
# - Listens on 80 (HTTP) and 443 (HTTPS)
# - Redirects all port 80 traffic to port 443
# - Manages load balancing across Node.js upstream processes.
#

#upstream nodejs {
#  # One failed response will take a server out of circulation for 20 seconds.
#  server 127.0.0.1:8060 fail_timeout=70s;
#}

server {
  # Listen on 80 and 443
  listen 80;
  listen 443 ssl;
  server_name localhost;
  tcp_nodelay on;
  # Self-signed certificate.
  ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
  ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
  # Certificate chained with a certificate authority bundle.
  # ssl_certificate /etc/ssl/certs/example.com.chained.crt;
  # ssl_certificate_key /etc/ssl/private/example.com.key;

  # Redirect all non-SSL traffic to SSL.
  #if ($ssl_protocol = "") {
  #  rewrite ^ https://$host$request_uri? permanent;
  #}

  # Split off traffic to Node.js backends, and make sure that websockets
  # are managed correctly.
  location / {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-NginX-Proxy true;
    proxy_pass http://127.0.0.1:8060;
    proxy_http_version 1.1;
#    proxy_set_header Upgrade websocket;
#    proxy_set_header Connection upgrade;
#    proxy_pass http://localhost:8080;
#    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
  }
}
